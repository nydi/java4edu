class CashBox
!!!130037.java!!!	CashBox()
		// init with 5 coins of each type
		coins = new int[6];
		for (int i = 0; i < coins.length; i++) {
			coins[i] = 5;
		}
!!!130165.java!!!	withdraw(inout amount : Double) : Coin
		if(!canWithdraw(amount))
			return null;
		
		// calculate coins to withdraw
		final int[] coinsToWithdraw = new int[6];
		int valency = 5;

		while((0.05d < Math.abs(amount)) && (0 <= valency))
		{
			final Coin currentCoin = Coin.getByValency(valency);
			final int countOfCurrentCoin = numberOfCoins(currentCoin, amount);
			
			if(0 == countOfCurrentCoin)
			{
				valency--;
				continue;
			}
			
			amount = amount % (countOfCurrentCoin * currentCoin.getValue());
			
			coins[valency] -= countOfCurrentCoin;
			// update cash box
			coinsToWithdraw[valency] = countOfCurrentCoin;
			valency--;
		}

		// cash out coins of coinsToWithdraw
		int numberOfCoins = 0;

		for (int i = 0; i < coinsToWithdraw.length; i++) {
			numberOfCoins += coinsToWithdraw[i];
		}
		
		final Coin[] coinsOutOfCashBox = new Coin[numberOfCoins];

		int coinsOutOfCashBoxCounter = 0;

		for (final Coin coin : Coin.values()) {
			for (int i = 0; i < coinsToWithdraw[coin.getValency()]; i++) {
				coinsOutOfCashBox[coinsOutOfCashBoxCounter] = coin;
				coinsOutOfCashBoxCounter++;
			}
		}
		
		return coinsOutOfCashBox;
!!!130293.java!!!	canWithdraw(inout amount : Double) : boolean
		// check total amount
		if(amount > getCashBoxAmount())
			return false;
		
		// calculate amount of each coin value to pay the amount, after walktrough all coins
		// the amount should 0
		int valency = 5;
		while((0.05d < Math.abs(amount)) && (0 <= valency))
		{
			amount = checkCoinSplitting(amount, Coin.getByValency(valency));
			valency--;
		}
		
		// check amount < 0.05 to hook expected calculation errors caused by double data type 
		if(0.05d < Math.abs(amount))
			return false;
		
		return true;
!!!130421.java!!!	checkCoinSplitting(in amount : Double, in coin : Coin) : Double
		final int countOfCurrentCoin = numberOfCoins(coin, amount);
		// if one of the values is zero, so we can't pay with this coin value
		if((0 == countOfCurrentCoin) || (0 == coins[coin.getValency()]))
			return amount;
		
		return amount % (Math.min(countOfCurrentCoin, coins[coin.getValency()]) * coin.getValue());
!!!130549.java!!!	numberOfCoins(in coin : Coin, in value : double) : int
		return (int) Math.floor(value / coin.getValue());
!!!130677.java!!!	deposit(in coinsToDeposit : Coin) : void
		for (final Coin coin : coinsToDeposit) {
			coins[coin.getValency()]++;
		}
!!!130805.java!!!	getCashBoxAmount() : Double
		// summation of coins by valency and count
		double amount = 0.0d;
		for (final Coin coin : Coin.values()) {
			amount = amount + (coins[coin.getValency()] * coin.getValue());
		}
		return amount;
