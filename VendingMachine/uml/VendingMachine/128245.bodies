class VendingMachine
!!!128245.java!!!	VendingMachine()
		inventory = new Inventory();
		ejector = new Ejector();
		coinBuffer = new CoinBuffer();
		cashBox = new CashBox();
		display = new Display();
		display.printMenu();
!!!128373.java!!!	insertCoin(in coin : Coin) : void
		coinBuffer.addCoin(coin);
		display.writeToDisplay("inserted amount: "+Utils.formatMoney(coinBuffer.getBufferdAmount()));
!!!128501.java!!!	chooseProduct(in name : String) : void
		display.writeToDisplay(name+ " choosed...");

		if(!inventory.isProductAvaiabale(name))
		{
			display.writeToDisplay(name+ " is not avaiable");
			return;
		}

		final double productPrice = inventory.getProductPrice(name);
		
		if(productPrice <= coinBuffer.getBufferdAmount())
		{
			final double cashBack = coinBuffer.getBufferdAmount() - productPrice;
			if((0 < cashBack) && !cashBox.canWithdraw(cashBack))
			{
				display.writeToDisplay("don't have enough money to give cashback: "+Utils.formatMoney(cashBack));
				return;
			}
			cashBox.deposit(coinBuffer.flush());
			
			final Product product = inventory.removeProduct(name);
			ejector.eject(product);
			display.writeToDisplay("enjoy " + product.getName());
			if(0d < cashBack)
			{
				ejector.eject(cashBox.withdraw(cashBack));	
				display.writeToDisplay("take your cashback: " + Utils.formatMoney(cashBack));
			}
			display.printMenu();
		}
		else
		{
			final StringBuilder builder = new StringBuilder();
			builder.append("price of ").
			append(name).
			append(": ").
			append(Utils.formatMoney(productPrice)).
			append(" insert ").
			append(Utils.formatMoney(productPrice - coinBuffer.getBufferdAmount())).
			append(" more.");
			display.writeToDisplay(builder.toString());
		}
!!!128629.java!!!	ejectCoinsInBuffer() : void
		ejector.eject(coinBuffer.flush());
